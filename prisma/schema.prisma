generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  NOT_SET
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  VIEWED
  SHORTLISTED
  SELECTED
}

enum JobListingStatus {
  HIRING
  ENDED
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  // for both
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  username      String?          @unique @default(nanoid(5)) // might not use
  slug          String?          @unique @default(nanoid(5))
  image         String?
  role          Role             @default(NOT_SET)
  location      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]

  // for job seeker
  bio           String?
  salary        String?
  resume        String? 
  skills        String[]
  experiences   Experience[]
  jobDomain     String?
  contact       String? // Contact details for employers

  // for companies
  tagline       String?
  desc          String?
  founded       String?
  size          String?
  website       String?
  views         Int              @default(0)
  jobListings   JobListing[]
  applications  JobApplication[]
  notifications Notification[]
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model JobListing {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  location     String
  category     String
  salary       String
  keywords     String[]
  employerId   String           @db.ObjectId
  employer     User             @relation(fields: [employerId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  numapplications Int           @default(0)
  views        Int              @default(0)
  applications JobApplication[]
  status       JobListingStatus @default(HIRING)
}

model JobApplication {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  jobListingId String            @db.ObjectId
  applicantId  String            @db.ObjectId // to fetch his previous experiences
  applicant    User              @relation(fields: [applicantId], references: [id])
  jobListing   JobListing        @relation(fields: [jobListingId], references: [id])
  name         String
  email        String
  phone        Int?
  salary       String? // expected
  skills       String[]
  resume       String
  status       ApplicationStatus @default(PENDING)
  appliedAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  companyName String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String?
}

// model Education {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String   @db.ObjectId
//   user        User     @relation(fields: [userId], references: [id])
//   institution String
//   degree      String
//   field       String
//   startDate   DateTime
//   endDate     DateTime?
//   description String?
// }

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
